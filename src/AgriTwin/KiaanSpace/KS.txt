import React, { useState, useRef, useEffect } from 'react';
import { Camera, StopCircle, Play } from 'lucide-react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { toast } from '@/hooks/use-toast';

const KiaanSpace = () => {
  const [isStreaming, setIsStreaming] = useState(false);
  const [detectionReport, setDetectionReport] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const videoRef = useRef(null);
  const streamRef = useRef(null);
  const processingRef = useRef(false);

  const startCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: 'environment',
          width: { ideal: 640 },
          height: { ideal: 480 }
        } 
      });
      videoRef.current.srcObject = stream;
      streamRef.current = stream;
      setIsStreaming(true);
      toast({
        title: "Camera Started",
        description: "Now capturing and processing frames..."
      });
      startFrameCapture();
    } catch (err) {
      console.error("Error accessing camera:", err);
      toast({
        title: "Camera Error",
        description: err.message,
        variant: "destructive"
      });
    }
  };

  const stopCamera = () => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      setIsStreaming(false);
      processingRef.current = false;
      toast({
        title: "Camera Stopped",
        description: "Processing final results..."
      });
    }
  };

  const captureFrame = async () => {
    return new Promise((resolve) => {
      const canvas = document.createElement('canvas');
      const video = videoRef.current;
      
      // Wait for video metadata to load
      if (video.readyState === video.HAVE_ENOUGH_DATA) {
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0);
        
        // Convert to base64 and remove the data URL prefix
        const base64Data = canvas.toDataURL('image/jpeg', 0.8).split(',')[1];
        resolve(base64Data);
      } else {
        resolve(null);
      }
    });
  };

  const sendFrameToServer = async (base64Frame) => {
    try {
      console.log('Sending frame to server...'); // Debug log
      const response = await fetch('http://192.168.0.104:5000/detect', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ frame: base64Frame })
      });
      
      console.log('Server response status:', response.status); // Debug log
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Server error: ${response.status} - ${errorText}`);
      }
      
      const data = await response.json();
      console.log('Server response data:', data); // Debug log
      return data;
    } catch (error) {
      console.error('Error sending frame:', error);
      toast({
        title: "Processing Error",
        description: error.message,
        variant: "destructive"
      });
      return null;
    }
  };

  const startFrameCapture = async () => {
    processingRef.current = true;
    
    while (processingRef.current) {
      if (!isProcessing) {
        setIsProcessing(true);
        
        const frame = await captureFrame();
        if (frame) {
          const result = await sendFrameToServer(frame);
          if (result) {
            setDetectionReport(prev => {
              const newDetections = result.detections;
              return prev ? {
                detections: [...prev.detections, ...newDetections]
              } : result;
            });
          }
        }
        
        setIsProcessing(false);
        await new Promise(resolve => setTimeout(resolve, 1000)); // 1 second delay
      }
    }
  };

  useEffect(() => {
    return () => {
      processingRef.current = false;
      if (streamRef.current) {
        stopCamera();
      }
    };
  }, []);

  return (
    <div className="p-4 max-w-4xl mx-auto">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Camera className="w-6 h-6" />
            Object Detection Camera
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="relative rounded-lg overflow-hidden bg-gray-100">
              <video
                ref={videoRef}
                autoPlay
                playsInline
                className="w-full aspect-video object-cover"
              />
              {isProcessing && (
                <div className="absolute top-2 right-2 bg-blue-500 text-white px-2 py-1 rounded-full text-sm">
                  Processing...
                </div>
              )}
            </div>
            
            <div className="flex justify-center gap-4">
              {!isStreaming ? (
                <Button onClick={startCamera} className="flex items-center gap-2">
                  <Play className="w-4 h-4" />
                  Start Detection
                </Button>
              ) : (
                <Button onClick={stopCamera} variant="destructive" className="flex items-center gap-2">
                  <StopCircle className="w-4 h-4" />
                  Stop Detection
                </Button>
              )}
            </div>

            {detectionReport && detectionReport.detections && detectionReport.detections.length > 0 && (
              <div className="mt-4 space-y-4">
                <h3 className="text-lg font-semibold">Detection Report</h3>
                <div className="grid grid-cols-2 gap-4">
                  {detectionReport.detections.map((detection, idx) => (
                    <div key={idx} className="border rounded-lg p-4">
                      <img 
                        src={`data:image/jpeg;base64,${detection.image}`} 
                        alt={`Detection ${idx + 1}`}
                        className="w-full rounded-lg"
                      />
                      <div className="mt-2">
                        <p className="font-medium">Objects Detected:</p>
                        {Object.entries(detection.counts).map(([obj, count]) => (
                          <p key={obj}>{obj}: {count}</p>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default KiaanSpace;